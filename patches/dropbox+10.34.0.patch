diff --git a/node_modules/dropbox/cjs/src/auth.js b/node_modules/dropbox/cjs/src/auth.js
index 9717e2a..77ea59b 100644
--- a/node_modules/dropbox/cjs/src/auth.js
+++ b/node_modules/dropbox/cjs/src/auth.js
@@ -63,7 +63,7 @@ var DropboxAuth = /*#__PURE__*/function () {
       crypto = self.crypto;
       /* eslint-enable no-restricted-globals */
     } else {
-      fetch = require('node-fetch'); // eslint-disable-line global-require
+      fetch = global.fetch; // require('node-fetch'); // eslint-disable-line global-require
 
       crypto = require('crypto'); // eslint-disable-line global-require
     }
diff --git a/node_modules/dropbox/types/dropbox_types.d.ts b/node_modules/dropbox/types/dropbox_types.d.ts
index 0023a19..8eabe14 100644
--- a/node_modules/dropbox/types/dropbox_types.d.ts
+++ b/node_modules/dropbox/types/dropbox_types.d.ts
@@ -26,6 +26,18 @@
   
   type Timestamp = string;
 
+  export namespace auth {
+    export interface GetAccessTokenFromCodeData {
+      access_token: `sl.${string}`;
+      token_type: 'bearer';
+      expires_in: number;
+      refresh_token: string;
+      scope: string;
+      uid: `${number}`;
+      account_id: `dbid:${string}`;
+    }
+  }
+
   export namespace account {
     /**
      * Image data in base64-encoded bytes.
diff --git a/node_modules/dropbox/types/index.d.ts b/node_modules/dropbox/types/index.d.ts
index b6a073b..04b60e3 100644
--- a/node_modules/dropbox/types/index.d.ts
+++ b/node_modules/dropbox/types/index.d.ts
@@ -51,7 +51,7 @@ export class DropboxAuth {
    * @param code An OAuth2 code.
    * @returns {Object} An object containing the token and related info (if applicable)
    */
-  getAccessTokenFromCode(redirectUri: string, code: string): Promise<DropboxResponse<object>>;
+  getAccessTokenFromCode(redirectUri: string, code: string): Promise<DropboxResponse<auth.GetAccessTokenFromCodeData>>;
 
   /**
    * Get a URL that can be used to authenticate users for the Dropbox API.
@@ -65,7 +65,7 @@ export class DropboxAuth {
    * legacy - creates one long-lived token with no expiration
    * online - create one short-lived token with an expiration
    * offline - create one short-lived token with an expiration with a refresh token
-   * @arg {Array<String>} [scope] - scopes to request for the grant
+   * @arg {Array<string>} [scope] - scopes to request for the grant
    * @arg {String} [includeGrantedScopes] - whether or not to include previously granted scopes.
    * From the following:
    * user - include user scopes in the grant
@@ -74,10 +74,10 @@ export class DropboxAuth {
    * @arg {boolean} [usePKCE] - Whether or not to use Sha256 based PKCE. PKCE should be only use on
    * client apps which doesn't call your server. It is less secure than non-PKCE flow but
    * can be used if you are unable to safely retrieve your app secret
-   * @returns {Promise<String>} - Url to send user to for Dropbox API authentication
+   * @returns {Promise<string>} - Url to send user to for Dropbox API authentication
    * returned in a promise
    */
-  getAuthenticationUrl(redirectUri: string, state?: string, authType?: 'token' | 'code', tokenAccessType?: null | 'legacy' | 'offline' | 'online', scope?: Array<String>, includeGrantedScopes?: 'none' | 'user' | 'team', usePKCE?: boolean): Promise<String>;
+  getAuthenticationUrl(redirectUri: string, state?: string, authType?: 'token' | 'code', tokenAccessType?: null | 'legacy' | 'offline' | 'online', scope?: Array<string>, includeGrantedScopes?: 'none' | 'user' | 'team', usePKCE?: boolean): Promise<string>;
 
   /**
    * Get the client id
@@ -144,7 +144,7 @@ export class DropboxAuth {
    * If so, attempts to refresh access token
    * @returns {Promise<*>}
    */
-  checkAndRefreshAccessToken(): void;
+  checkAndRefreshAccessToken(): Promise<void>;
 
   /**
    * Refreshes the access token using the refresh token, if available
@@ -152,7 +152,7 @@ export class DropboxAuth {
    * refresh to acquire with an access token
    * @returns {Promise<*>}
    */
-  refreshAccessToken(scope?: Array<String>): void;
+  refreshAccessToken(scope?: Array<string>): Promise<void>;
 
 }
 
@@ -241,6 +241,8 @@ export class Dropbox {
    * create files or folders in a user or team's Dropbox.
    */
   constructor(options: DropboxOptions);
+
+  auth: DropboxAuth
 /*ROUTES*/
 
     /**
